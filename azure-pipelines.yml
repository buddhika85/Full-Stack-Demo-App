trigger:
- main                          # Tells Azure DevOps to run the pipeline whenever code is pushed to the main branch.


pool:
  vmImage: 'windows-latest'     # Build agent OS
  
  

steps:

# 1 Install .NET 9 SDK explicitly
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '9.0.304'   # exact version from my DEV machine
    includePreviewVersions: true
    installationPath: $(Agent.ToolsDirectory)/dotnet



# 2 Install NugetCLI for restoring packages
- task: NuGetToolInstaller@1


# 3 Restore NuGet packages - all dependencies defined in Backend.sln are installed
- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: 'Backend/Backend.sln'



# 4 Build solution - compiles all projects in Release mode
- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: 'Backend/Backend.sln'
    arguments: '--configuration Release'
    

# 5 Run XUnit tests + collect coverage
- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: 'Backend/XUnitTests/*.csproj'
    arguments: '--configuration Release --no-build --collect:"XPlat Code Coverage"'
    publishTestResults: true
    
    
# 6 Publish test results
- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'xUnit'
    testResultsFiles: '**/TestResults/*.xml'
    failTaskOnFailedTests: true                             # ensures the pipeline fails if any test fails.
  condition: succeededOrFailed()                            # ensures results are published even if tests fail.



# 7 Publish coverage
- task: PublishCodeCoverageResults@2
  inputs:
    codeCoverageTool: 'cobertura'                                                                   # Publishes the coverage report using the Cobertura format, which is compatible with Azure DevOps UI.
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/**'
  condition: succeededOrFailed()                                                                    # ensures coverage is published even if tests fail.
