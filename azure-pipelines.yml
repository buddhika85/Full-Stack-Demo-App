trigger:
- main                          # Tells Azure DevOps to run the pipeline whenever code is pushed to the main branch.

variables:
- group: vg-interview-demo      # Variable group containing secrets and config values

# ----------------------------
# Uses 3 jobs across 1 stage:
# JOB 1 - CI + API + DB (Windows agent)
# JOB 2 - Angular Build (Windows agent)
# JOB 3 - Angular Deployment (Linux agent)
# ----------------------------

stages:
- stage: BuildAndDeploy
  displayName: 'CI/CD Pipeline'
  jobs:

  # ----------------------------
  # JOB 1 - CI steps 1 to 11
  # ----------------------------
  - job: CI_Backend
    displayName: 'Build, Test, Deploy API + DB'
    pool:
      vmImage: 'windows-latest'
    steps:

    # 1. CI — Install .NET 9 SDK explicitly
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '9.0.304'   # exact version from my DEV machine
        includePreviewVersions: true
        installationPath: $(Agent.ToolsDirectory)/dotnet

    # 2. CI — Install NugetCLI for restoring packages
    - task: NuGetToolInstaller@1

    # 3. CI — Restore NuGet packages - all dependencies defined in Backend.sln are installed
    - task: NuGetCommand@2
      inputs:
        command: 'restore'
        restoreSolution: 'Backend/Backend.sln'

    # 4. CI — Build solution - compiles all projects in Release mode
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'Backend/Backend.sln'
        arguments: '--configuration Release'

    # 5. CI — Run XUnit tests with TRX logger + collect coverage
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: 'Backend/Emp.XUnitTests/*.csproj'
        arguments: '--configuration Release --no-build --no-restore --collect:"XPlat Code Coverage" --logger "trx;LogFileName=test-results.trx"'
        publishTestResults: false                                   # We'll handle publishing ourselves

    # 6. CI — Publish test results
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/TestResults/test-results.trx'         # test results in /TestResults/test-results.trx
        failTaskOnFailedTests: true                                 # ensures the pipeline fails if any test fails.
      condition: succeededOrFailed()                                # ensures results are published even if tests fail.

    # 7. CI — Publish coverage
    - task: PublishCodeCoverageResults@2                            # Picks up coverage.cobertura.xml and shows coverage % in DevOps summary.
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.cobertura.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**'
      condition: succeededOrFailed()

    # 8. CI — Publish HTML coverage report as artifact
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'Backend/Emp.XUnitTests/TestResults'         # Explicit path to TestResults folder
        ArtifactName: 'coverage-report'
        publishLocation: 'Container'
      condition: succeededOrFailed()

    # 9. CD — Publish Backend API
    - task: DotNetCoreCLI@2
      displayName: 'Publish Backend API'
      inputs:
        command: 'publish'
        projects: 'Backend/Emp.Api/Emp.Api.csproj'
        arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)/api'

    # 10. CD — Deploy Backend API
    - task: AzureWebApp@1
      displayName: 'Deploy API to Azure App Service'
      inputs:
        azureSubscription: 'sc-azure-rg-interview-demo'             # ARM service connection in DevOps
        appName: 'api-interview-demo'                               # Name of the Backend Azure App Service
        package: '$(Build.ArtifactStagingDirectory)/api'

    # 11. CD — Database Migrations - Install dotnet-ef + run migrations
    - script: |
        dotnet tool install --global dotnet-ef --version 9.*
        echo ##vso[task.prependpath]$HOME/.dotnet/tools
      displayName: 'Install dotnet-ef tool'

    - script: |
        dotnet ef database update --project Backend/Emp.Api/Emp.Api.csproj --configuration Release --no-build
      displayName: 'Run EF Core Migrations'
      env:
        ConnectionStrings__DefaultConnection: '$(ConnectionStrings__DefaultConnection)'   # stored in pipeline variables

  # ----------------------------
  # JOB 2 - Angular SPA Build (Windows agent)
  # ----------------------------
  - job: BuildAngular
    displayName: 'Build Angular App'
    pool:
      vmImage: 'windows-latest'
    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '20.x'

      # Step 1 — Build Angular app using PowerShell for reliable execution
      # Explicitly set output path to dist/debug-check to avoid ambiguity
      - task: PowerShell@2
        displayName: 'Build Angular App and List Output'
        inputs:
          targetType: 'inline'
          script: |
            cd "$(Build.SourcesDirectory)\Emp.Angular"
            npm install
            npx ng build -c production --output-path=dist/debug-check
            Write-Host "✅ Build completed. Listing contents:"
            Get-ChildItem "dist/debug-check" -Recurse

      # Step 2 — Recursively list contents of dist/debug-check folder to confirm actual output structure
      - powershell: |
          Get-ChildItem "$(Build.SourcesDirectory)\Emp.Angular\dist\debug-check" -Recurse
        displayName: 'Recursively list Angular dist/debug-check contents'

      # Step 3 — Fallback check to avoid pipeline failure if dist/debug-check folder is missing
      - powershell: |
          if (Test-Path "$(Build.SourcesDirectory)\Emp.Angular\dist\debug-check") {
            Write-Host "✅ Angular dist/debug-check folder found."
          } else {
            Write-Host "❌ Angular dist/debug-check folder not found. Check build output."
          }
        displayName: 'Check if Angular dist/debug-check folder exists'

      # ✅ Final fix — publish everything inside dist/debug-check/browser folder
      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/Emp.Angular/dist/debug-check/browser'          # ✅ Corrected path to compiled Angular output
          ArtifactName: 'angular-dist'
          publishLocation: 'Container'

  # ----------------------------
  # JOB 3 - Angular SPA Deploy (Linux Agent)
  # ----------------------------
  - job: DeployAngular
    displayName: 'Deploy Angular to Azure Static Web Apps'
    dependsOn: BuildAngular
    condition: succeeded()
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      # ✅ Download artifact to known path
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: angular-dist
          targetPath: '$(System.DefaultWorkingDirectory)/angular-dist'

      # ✅ Verify contents of downloaded artifact before deployment
      - script: ls $(System.DefaultWorkingDirectory)/angular-dist
        displayName: 'Verify downloaded Angular artifact contents'

      # ✅ Deploy from current directory
      - task: AzureStaticWebApp@0
        inputs:
          app_location: '.'                                         # ✅ Deploy from current directory
          skip_app_build: true
          output_location: ''
          azure_static_web_apps_api_token: '$(SWA_DEPLOYMENT_TOKEN)'
        workingDirectory: '$(System.DefaultWorkingDirectory)/angular-dist'      # ✅ Set working directory for deployment